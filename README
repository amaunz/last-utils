Welcome to LAST-Utils.

These are LAST utilities, available from http://github.com/amaunz/last-utils/tree/master. Requirements: ruby 1.8 and gem (plugin) "hpricot".
LAST is available from http://github.com/amaunz/last/tree/master.


EXAMPLES:
Two modi are available: conversion LAST->SMARTS and instantiation SMARTS/SMILES. Examples:

Mine LAST descriptors and convert output to SMARTS (see LAST README file how to use the fminer frontend binary for LAST):
./fminer -f14 -r ../cpdbdata/salmonella_mutagenicity/salmonella_mutagenicity_alt.smi ../cpdbdata/salmonella_mutagenicity/salmonella_mutagenicity_alt.class | ../last-utils/last-utils.rb 1 > salm-last.smarts

Find instantiations of molecules in a .smi file using the last descriptors we just mined:
../last-utils/last-utils.rb 2 ../cpdbdata/salmonella_mutagenicity/salmonella_mutagenicity_alt.smi < salm-last.smarts > salm-last.inst

For more information see USAGE or run last-utils.rb without arguments.


TRANSFORMATION TO SMARTS:
SMARTS are regular expressions for chemical fragments. The implementation used here, (LAST-SMARTS), are recursively generated by a depth-first traversal of the graph, starting at node 0. Atoms are represented by their number, e.g. #6 for carbon. Bonds are represented by their order.
For an introduction to SMARTS, see e.g. http://www.daylight.com/meetings/summerschool01/course/basics/smarts.html.

For every node visited, we demand an explicit but arbitrary branch with '(~*)' IF AND ONLY IF there are n optional branches with n>1 (*). 
In case of (*), for each branch bi, i in [1,n], we describe the 1-step ('local') neighborhood of the node by a recursive SMARTS pattern, including the node itself, predecessor (if any), bi, and successor (if any). The pattern bi is itself a LAST-SMARTS, and the local neighborhoods are combined via disjunction (there must be at least two due to (*)).

Formally, LAST-SMARTS are defined as follows:
----------------------------------------------------------------------------------------
LAST-SMARTS: {node:n, branchnode:n} bond:b ...
----------------------------------------------------------------------------------------
      node: '[#'int:n']'
      bond: {'','=','#'}                                                                     // single bonds omitted
  bondnode: bond node
     local: node:self '(' bond:l LAST-SMARTS:branch ')' [(bondnode:back), bondnode:forw]
branchnode: '[#' int:type ';$(' local:env ')' ... '](~*)'
----------------------------------------------------------------------------------------
where {} denotes "exactly one of", [] denotes "at least one of", and 's' denotes the string constant s.


Andreas Maunz, 2009
